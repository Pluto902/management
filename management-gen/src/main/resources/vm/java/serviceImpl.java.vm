package ${packageName}.service.impl;

import java.util.List;
    #foreach ($column in $columns)
        #if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
            #break
        #end
    #end
import com.zhangyan.management.common.util.ResultList;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.stereotype.Service;
#if($table.sub)
import com.zhangyan.management.common.constant.Constants;
import com.zhangyan.management.common.service.ComServiceImpl;
import ${packageName}.entity.${subClassName};
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.entity.${ClassName};
import ${packageName}.service.${ClassName}Service;
import ${packageName}.pojo.${ClassName}Param;
import ${packageName}.pojo.${ClassName}DelParam;
import java.util.Date;

import javax.annotation.Resource;
/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl extends ComServiceImpl<${ClassName}Mapper, ${ClassName}> implements ${ClassName}Service{

    @Resource
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 获取${functionName}详细信息
     */
    @Override
    public ${ClassName} getById(String ${pkColumn.javaField}) {
           return ${className}Mapper.getById(${pkColumn.javaField});
    }

    /**
     * 新增${functionName}
     */
    @Override
    public int insert(${ClassName} addRequest){
        addRequest.setCreateBy(getUserId());
        addRequest.setUpdateBy(getUserId());
        addRequest.setCreateTime(new Date());
        addRequest.setUpdateTime(new Date());
        addRequest.setStatus(Constants.STATUS_ENABLE);
        return ${className}Mapper.insert(addRequest);
    }

    /**
     * 修改${functionName}
     */
    @Override
    public int updateByKey(${ClassName} updateRequest){
        updateRequest.setUpdateBy(getUserId());
        updateRequest.setUpdateTime(new Date());
        return ${className}Mapper.updateById(updateRequest);
    }

    /**
     * 删除${functionName}
     */
    @Override
    public int deleteById(${ClassName}DelParam deleteRequest){
        ${ClassName} data= new ${ClassName}();
        data.setId(deleteRequest.getId());
        data.setStatus(Constants.STATUS_DELETE);
        data.setUpdateBy(getUserId());
        data.setUpdateTime(new Date());
        return ${className}Mapper.updateById(data);
    }

##    /**
##     * 批量删除${functionName}
##     */
##    @Override
##    public int deleteBatchById(${ClassName}DelParam deleteRequest){
##        List<${ClassName}> ${className}List = new ArrayList();
##        for(String id: deleteRequest.getIds()){
##            ${ClassName} data= new ${ClassName}();
##            data.setId(id);
##            data.setStatus(BizConstants.STATUS_DELETE);
##            data.setUpdateBy(getUserId());
##            data.setUpdateDate(new Date());
##            ${className}List.add(data);
##        }
##        return ${className}Mapper.updateBatchById(data);
##    }

    /**
     * 分页查询${functionName}
     */
    @Override
    public ResultList list(${ClassName}Param param){
        Page<${ClassName}> resultPage=new Page(param.getPage(),param.getLimit());
        Page<${ClassName}> resultList = (Page) ${className}Mapper.list(resultPage,param);
        return ResultList.createSuccessResult(resultList.getRecords(),resultList.getTotal());
    }

    /**
     * 不分页查询${functionName}
     */
    @Override
    public ResultList datas(${ClassName}Param param){
        List<${ClassName}> ${className}List = ${className}Mapper.datas(param);
        return ResultList.createSuccessResult(${className}List);
    }
}